#!/usr/bin/env python
import numpy as np
from evo.tools.file_interface import read_tum_trajectory_file, write_tum_trajectory_file
from evo.core import trajectory


class TrajectorySorter:
    """
    Reverse the timestamp of the estimated trajectory generated by CCMSLAM
    """
    def __init__(self, base_path, agent_id):
        self.base_path = base_path
        self.agent_id = agent_id
        self.est_file = self.base_path + "KF_GBA_{}.csv".format(agent_id)
        self.est_file_sorted = self.base_path + "KF_GBA_{}_sorted.csv".format(agent_id)

    def sort_trajectory(self):
        est_traj = read_tum_trajectory_file(self.est_file)

        sorted_indices = np.argsort(est_traj.timestamps)
        sorted_timestamps = est_traj.timestamps[sorted_indices]
        sorted_poses = [est_traj.poses_se3[i] for i in sorted_indices]
        sorted_traj = trajectory.PoseTrajectory3D(poses_se3=sorted_poses, timestamps=sorted_timestamps)

        write_tum_trajectory_file(self.est_file_sorted, sorted_traj)
        print("Trajectory sorted successfully: {0}".format(self.est_file_sorted))


class TrajectoryConverter:
    def __init__(self, base_path, agent_identifier, agent_start_time, agent_end_time, ground_truth):
        self.base_path = base_path
        self.agent_identifier = agent_identifier
        self.agent_traj_sort = base_path + "KF_GBA_{}_sorted.csv".format(agent_identifier)
        self.groundTruth_orig = base_path + ground_truth
        self.groundTruth_relative = base_path + ground_truth.rsplit('.', 1)[0] + "_relative.csv"

        self.agent_traj = read_tum_trajectory_file(self.agent_traj_sort)
        self.groundTruth = read_tum_trajectory_file(self.groundTruth_orig)
        self.agent_start_time = agent_start_time
        self.agent_end_time = agent_end_time

    def adjust_agent_trajectory(self):
        first_timestamp = self.agent_traj.timestamps[0]
        self.agent_traj.timestamps -= first_timestamp
        self.agent_traj.timestamps += self.agent_start_time
        write_tum_trajectory_file(self.base_path + "KF_GBA_{}_sorted_{}_{}.csv".format(self.agent_identifier, self.agent_start_time, self.agent_end_time), self.agent_traj)

    def adjust_ground_truth(self):
        first_timestamp_GT = self.groundTruth.timestamps[0]
        self.groundTruth.timestamps -= first_timestamp_GT
        write_tum_trajectory_file(self.groundTruth_relative, self.groundTruth)

    def run(self):
        self.adjust_agent_trajectory()
        self.adjust_ground_truth()
        print("")


if __name__ == "__main__":

    # config parameters
    base = "/media/zuyuan/DATA1TB/Jackal/bags_data_campaign_july_2023/Evaluation/"
    group_folder = "rosbag_2_1_upper_half_2"
    agents = ["A", "B"]
    agent_traj_start_time = {"A": 10, "B": 127}
    agent_traj_end_time = {"A": 55, "B": 167}
    ground_truth = "rosbag_2_groundtruth.txt"

    base_path = base + group_folder + "/"

    # First, sort the trajectories
    for agent_id in range(len(agents)):
        sorter = TrajectorySorter(base_path, agent_id)
        sorter.sort_trajectory()

    # Next, adjust the trajectories based on start and end times
    for agent, i in zip(agents, range(len(agents))):
        agent_file = "KF_GBA_{}_sorted.csv".format(i)
        converter = TrajectoryConverter(base_path, i, agent_traj_start_time[agent],
                                        agent_traj_end_time[agent], ground_truth)
        converter.run()

